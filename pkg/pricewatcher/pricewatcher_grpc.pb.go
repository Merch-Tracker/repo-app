// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v5.29.2
// source: pricewatcher.proto

package pricewatcher

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	PriceWatcher_GetMerch_FullMethodName   = "/pricewatcher.PriceWatcher/GetMerch"
	PriceWatcher_PostMerch_FullMethodName  = "/pricewatcher.PriceWatcher/PostMerch"
	PriceWatcher_ParserInfo_FullMethodName = "/pricewatcher.PriceWatcher/ParserInfo"
)

// PriceWatcherClient is the client API for PriceWatcher service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PriceWatcherClient interface {
	GetMerch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MerchRequest], error)
	PostMerch(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[MerchResponse, emptypb.Empty], error)
	ParserInfo(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error)
}

type priceWatcherClient struct {
	cc grpc.ClientConnInterface
}

func NewPriceWatcherClient(cc grpc.ClientConnInterface) PriceWatcherClient {
	return &priceWatcherClient{cc}
}

func (c *priceWatcherClient) GetMerch(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (grpc.ServerStreamingClient[MerchRequest], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PriceWatcher_ServiceDesc.Streams[0], PriceWatcher_GetMerch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[emptypb.Empty, MerchRequest]{ClientStream: stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PriceWatcher_GetMerchClient = grpc.ServerStreamingClient[MerchRequest]

func (c *priceWatcherClient) PostMerch(ctx context.Context, opts ...grpc.CallOption) (grpc.ClientStreamingClient[MerchResponse, emptypb.Empty], error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	stream, err := c.cc.NewStream(ctx, &PriceWatcher_ServiceDesc.Streams[1], PriceWatcher_PostMerch_FullMethodName, cOpts...)
	if err != nil {
		return nil, err
	}
	x := &grpc.GenericClientStream[MerchResponse, emptypb.Empty]{ClientStream: stream}
	return x, nil
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PriceWatcher_PostMerchClient = grpc.ClientStreamingClient[MerchResponse, emptypb.Empty]

func (c *priceWatcherClient) ParserInfo(ctx context.Context, in *StatusRequest, opts ...grpc.CallOption) (*StatusResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StatusResponse)
	err := c.cc.Invoke(ctx, PriceWatcher_ParserInfo_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PriceWatcherServer is the server API for PriceWatcher service.
// All implementations must embed UnimplementedPriceWatcherServer
// for forward compatibility.
type PriceWatcherServer interface {
	GetMerch(*emptypb.Empty, grpc.ServerStreamingServer[MerchRequest]) error
	PostMerch(grpc.ClientStreamingServer[MerchResponse, emptypb.Empty]) error
	ParserInfo(context.Context, *StatusRequest) (*StatusResponse, error)
	mustEmbedUnimplementedPriceWatcherServer()
}

// UnimplementedPriceWatcherServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedPriceWatcherServer struct{}

func (UnimplementedPriceWatcherServer) GetMerch(*emptypb.Empty, grpc.ServerStreamingServer[MerchRequest]) error {
	return status.Errorf(codes.Unimplemented, "method GetMerch not implemented")
}
func (UnimplementedPriceWatcherServer) PostMerch(grpc.ClientStreamingServer[MerchResponse, emptypb.Empty]) error {
	return status.Errorf(codes.Unimplemented, "method PostMerch not implemented")
}
func (UnimplementedPriceWatcherServer) ParserInfo(context.Context, *StatusRequest) (*StatusResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ParserInfo not implemented")
}
func (UnimplementedPriceWatcherServer) mustEmbedUnimplementedPriceWatcherServer() {}
func (UnimplementedPriceWatcherServer) testEmbeddedByValue()                      {}

// UnsafePriceWatcherServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PriceWatcherServer will
// result in compilation errors.
type UnsafePriceWatcherServer interface {
	mustEmbedUnimplementedPriceWatcherServer()
}

func RegisterPriceWatcherServer(s grpc.ServiceRegistrar, srv PriceWatcherServer) {
	// If the following call pancis, it indicates UnimplementedPriceWatcherServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&PriceWatcher_ServiceDesc, srv)
}

func _PriceWatcher_GetMerch_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(emptypb.Empty)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PriceWatcherServer).GetMerch(m, &grpc.GenericServerStream[emptypb.Empty, MerchRequest]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PriceWatcher_GetMerchServer = grpc.ServerStreamingServer[MerchRequest]

func _PriceWatcher_PostMerch_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(PriceWatcherServer).PostMerch(&grpc.GenericServerStream[MerchResponse, emptypb.Empty]{ServerStream: stream})
}

// This type alias is provided for backwards compatibility with existing code that references the prior non-generic stream type by name.
type PriceWatcher_PostMerchServer = grpc.ClientStreamingServer[MerchResponse, emptypb.Empty]

func _PriceWatcher_ParserInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StatusRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PriceWatcherServer).ParserInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: PriceWatcher_ParserInfo_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PriceWatcherServer).ParserInfo(ctx, req.(*StatusRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PriceWatcher_ServiceDesc is the grpc.ServiceDesc for PriceWatcher service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PriceWatcher_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "pricewatcher.PriceWatcher",
	HandlerType: (*PriceWatcherServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ParserInfo",
			Handler:    _PriceWatcher_ParserInfo_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetMerch",
			Handler:       _PriceWatcher_GetMerch_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "PostMerch",
			Handler:       _PriceWatcher_PostMerch_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "pricewatcher.proto",
}
